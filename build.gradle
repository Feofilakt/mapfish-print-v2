apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    maven {url "http://repo.opengeo.org/"}
    maven {url "http://maven.restlet.org"}
    maven {url "https://repo.boundlessgeo.com/main/"}
}

configurations {
    geoserver
}

dependencies {
    geoserver ('org.geoserver.web:web-app:2.4.3') {
        transitive = false;
    }
    testCompile (rootProject, "junit:junit:${project.junitVersion}", 'org.mockito:mockito-core:1.9.5', "com.google.guava:guava:15.0")
}

def geoserverDir = "$buildDir/geoserver"
def geoserverDataDir = geoserverDir+"/data"
task extractGeoserver (type: Copy) {
    description "Extract the Geoserver web app jar and files in src/main/webapp into a directory to use for the jettyRun task"
    from zipTree(configurations.geoserver.singleFile)

    into geoserverDir
}

extractGeoserver.doLast {
    def offLoggingConfig = new File(geoserverDataDir, "logs/OFF_LOGGING.properties")
    logger.info("Writing an updated Geoserver log configuration to suppress geoserver output")
    new File(geoserverDataDir, "logging.xml").withWriter "UTF-8", { writer ->
        def builder = new groovy.xml.MarkupBuilder(writer)
        builder.logging {
            level "OFF_LOGGING.properties"
            location "${geoserverDir}/geoserver.log"
            stdOutLogging "false"
        }
    }
    offLoggingConfig.parentFile.mkdirs()
    offLoggingConfig.setText("log4j.debug=FALSE\nlog4j.rootLogger=OFF", "UTF-8")

    new File(geoserverDir, "index.html").withWriter "UTF-8",{writer ->
        def builder = new groovy.xml.MarkupBuilder(writer)
        builder.html {
            head {
                title 'Mapfish Print Examples'
            }
            body {
                h1 'Mapfish Print Examples'
                h2 'GeoExt Examples'

                ul {
                    def relativePath = "www/geoext-print-examples"
                    new File(geoserverDataDir, relativePath).listFiles().each { dir ->
                        if (dir.name != "css" && dir.name != "js") {
                            li {
                                def title = dir.name.split("-").collect{word -> word.capitalize()}.join(" ")
                                a (href:relativePath + "/${dir.name}/index.html", title)
                            }
                        }
                    }
                }
            }
        }
    }
}
task copyTestServerSpecificFiles (type: Copy) {
    description "Copy files from src/main/webapp into the geoserer directory to customize the testServer"
    from fileTree("src/main/webapp") {include '**'}

    into geoserverDir
}

task addPrintJarToGeoserver (type: Copy) {
    description "Add the mapfish-print jar to geoserver so the mapfish print examples will work"

    def printJarTask = project.parent.tasks['jar']
    dependsOn printJarTask, tasks['extractGeoserver'], tasks['copyTestServerSpecificFiles']
    from printJarTask.archivePath
    from project.parent.configurations.runtime.files { file ->
        file.name.contains ("mapfish") || file.name.contains ("json") || file.name.contains ("pdfbox") ||
                file.name.contains ("jyaml") || file.name.contains ("itext") || file.name.contains ("metrics")
    }
    into new File(geoserverDir, 'WEB-INF/lib')
}

jettyRun {
    dependsOn addPrintJarToGeoserver

    description 'Start the Geoserver Test Server'
    httpPort = 9876
    daemon = Boolean.parseBoolean(System.getProperty("jettyDaemon", "true"))
    contextPath = 'e2egeoserver'
    webAppSourceDirectory = file(geoserverDir)
    stopKey = "e2e-tests-geoserver"
    stopPort = 9877
    reload = 'manual'
}

task jettyRunForeground (dependsOn: jettyRun) << {
    description 'Start Geoserver Test Server in foreground mode for running local tests or accessing example print pages'
    logger.info("Finished test server in non-daemon (foreground) mode")
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(jettyRunForeground)) {
        jettyRun.doFirst{
            logger.info("Running test server in non-daemon (foreground) mode")
        }

        jettyRun.daemon = false;
    } else {
        jettyRun.doFirst{
            logger.info("Running test server in daemon (background) mode")
        }
    }
}

String interactiveExpression = '**/*InteractiveTest.class'
test {
    dependsOn ':compileJava', 'testClasses', 'jettyRun'
    description 'Runs all automated e2e (integration) tests.'
    maxParallelForks = Runtime.getRuntime().availableProcessors();
    exclude interactiveExpression
}

task interactiveTest (dependsOn: test, type: Test) {
    description 'Runs all automated e2e (integration) tests as well as the tests that require user input for tests verification.'
    maxParallelForks = 1;
    include interactiveExpression
}

//uploadArchives {
//    // do nothing because this project doesn't upload anything
//}
